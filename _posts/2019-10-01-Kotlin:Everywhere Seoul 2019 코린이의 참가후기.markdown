---
layout: post
title:  "[GDG] Kotlin/Everywhere Seoul 2019 코린이의 참가후기"
date:   2019-10-01 20:19:30
author: wishJinit
categories: 세미나후기
---



# 나는 왜 이 컨퍼런스를 신청하게 되었을까

코틀린의 존재는 내가 '안드로이드 개발직군으로 가야겠다!'라고 마음먹기 전부터 어느정도 인지하고 있었다.

고등학생 때 몇몇 선생님들께 구글과 오라클의 java 라이센스 분쟁에 대한 이야기를 들은 적이 있었기 때문이다.

사실 그 땐 '그렇구나~'라고 넘겼었는데 안드로이드에서의 kotlin의 비중은 생각보다 높았다.

공식문서만 봐도 이젠 kotlin 샘플코드가 가장 먼저나온다.

kotlin을 접한 안드로이드 개발자들도 kotlin을 무한 선호하고

도대체 "kotlin"이 뭐가 그렇게 좋은가 궁금해졌다.

<br><br>

Q. "Kotlin" 사용하면 좋은점이 뭔가요?

A. [[GDG] Kotlin/Everywhere Seoul 2019](https://festa.io/events/422) !

<br><br>

![](/image/2019-10-01-1/kotlin-everywhere.jpg)

<br>

해당 컨퍼런스는 1부와 2부로 나누어져 있었는데

1부는 **Svetlana Isakova** 님의 세션이었고 2부는 **노현석** 님의 세션이었다.

각 세션에 대한 내용은 다음과 같았다.

<br>

# What's New in Kotlin?

 **Svetlana Isakova** 님이 발표하신 세션1 - 'What's New in Kotlin?' 이다.

<br>

가장 처음에는 kotlin 변화과정, 이용자 수 등으로 kotlin의 현황을 알려주었다.

그 후, 코틀린을 발전시키기 위해 어떤 일을 하고 있는 지 알려주었는데, [Github [kotlin/KEEP]](https://github.com/Kotlin/KEEP) 에서 제안 및 피드백을 하며 더욱 안정적이고 강력한 언어로 거듭날 수 있도록 진행중이라고 하였다. kotlin의 성장세에 부응하기 위함 때문인지는 모르겠지만 'Feedbak'에 대해 굉장히 강조를 하였다.

그리고 새롭게 알게 된 점이 있었는데 코틀린에는 'Experimental' 기능이라고 해서 추후 기능을 위해 실험중인 부분이 있다고 하였다. 이 부분에 대해서는 지식이 부족해서 못알아들은 부분이 많았다 ㅠㅠㅠ

마지막으로 코틀린이 추구해나갈 방향에 대해 설명해주었다. 바로 Android, iOS, Server 등 플랫폼에 구애받지 않고(Multi-platform) 사용될 공통코드를 공유하는 것이었는데 이를 실현할 키워드가 '**expect**'와 '**actual**'이라고 하였다. 

해당 발표내용은 ["What's new in Kotlin?"](https://speakerdeck.com/svtk/whats-new-in-kotlin) 에서 조금 더 정확히 볼 수 있을 것이다.

<br><br>

# Kotlin 히치하이커의 준비서

 **노현석** 님이 발표하신 세션2 - 'Kotlin 히치하이커의 준비서' 이다.

<br>

사실 이번 세션도 각 세션에 대한 시간분배가 제대로 되지 않아 굉장히 스피드하게 발표를 하셔, 놓친 부분이 많았다.

그래도 들었던 부분을 나름 정리해보자면, 가장 처음 'by'라는 키워드에 대해 설명하며 'delegate'를 강조하셨다. 그와 함께 'by' 키워드가 가져다주는 kotlin의 강점과 유용하게 사용할 수 있는 방법을 예제 코드를 통해 보여주셨는데, 생각보다 강력한 기능일 것 같아 많은 참고가 되었다.

'delegate'의 장점은 첫째, 상속은 단 하나의 super class만 둘 수 있지만, 위임은 복수 interface로 가능하다는 것. 둘째, 도메인 지식을 delegation으로 숨길 수 있다는 것이 있었다.

'delegate'의 단점으로는 첫째, 유연하지만 이해하기 어렵다는 것, protected method/properties는 사용이 불가하다는 것이 있었다.

그리고 마지막으로 강조하신 점은 kotlin에서 부모/자식이 순수한 is-a관계가 아니라면, Inheritance(is-a)보다는 composition(has-a)을 이용하기를 추천하였다. 애매하게 상속을 구현할 경우, 캡슐화를 깨뜨리기 때문이다.

<br><br>

# 후기

<img width = "450px" height = "430px" src = "/image/2019-10-01-1/IMG_9966.JPG">

<br>

솔직히 처음 kotlin을 접했을 땐, '뭐 java랑 다를게 있겠어?'라는 생각으로 공부를 시작했었다. 실제로 초반엔 kotlin으로 개발을 하기는 하는데 java랑 다를거 없이 코드를 작성하기도 하였다. 그러나 더 공부를 하다보니, java와 다르게 확실히 편리하게 개발을 할 수 있다는 걸 알게 되었고 잘 활용하면 더 편리하고 깔끔하게 코드를 작성할 수 있겠구나 싶었다. 사실 그런 마음으로 컨퍼런스를 신청한 감도 없지않아 있었다.

이번 컨퍼런스에서 조금 아쉬운 점이 있었다면 내가 영어를 못해서 많이 알아듣지 못했다는 것이다..ㅠㅠㅠ 영어 공부도 나름 조금씩 하는 중인데 아직 발표를 알아듣기에는 확실히 모자란감이 있는 것 같았다. 앞으로 영어공부를 더 열심히 해야겠다..!

그래도 이번을 통해 kotlin만의 특징과 새로운 기능들을 많이 알았다. 처음 듣는 기능이었던 'Experimental'도 있었고 들어는 봤지만 이정도로 강력하게 사용할 수 있을줄은 몰랐던 'delegate'까지, 나름 kotlin을 더 유용하게 쓸 수 있을만한 방향을 잡은 것 같았다. 사실 kotlin을 공부할 때 대충 개념만 알고 넘어간 부분도 있었는데 이렇게 유용하게 사용할 수 있을 것이란 생각은 하지 못했던 것 같다. 오픈소스도 참고해보고 더 유용하게 사용할 수 있는 방법을 찾아 공부한다면 한층 더 깔끔한 코드를 작성할 수 있을 것 같다.

<br><br><br><br><br>
