---
layout: post
title:  "초초급 개발자가 쓰는 [안드로이드 컨퍼런스] 우리 회사는 이렇게 개발해요 참가 후기"
date:   2019-08-19 20:19:30
author: wishJinit
categories: 세미나후기
---



# 나는 왜 이 컨퍼런스를 신청하게 되었을까

안드로이드 개발을 시작한지 7개월차가 된 나는 아직도 체계적인 코드관리가 무엇인지 알 지 못했다.

![](/image/2019-08-18-1/IMG_9905.JPG)

<center>"체계가 뭔가요ㅠㅠ" "개발이 뭔가요ㅠㅠ"</center>

<br>

나도 다른 개발자분들처럼 멋있는 기술도 쓰고.. 디자인패턴도 정해서 구조도 만들고.. 해보고 싶지만 현실은 ..

![](/image/2019-08-18-1/wish.jpeg)

<center>"돌아가게만 해주세여 ㅠㅠ"</center>

<br><br>

덕분에 유지보수를 하려고 하면 이게 내가 만든건지 옆에 있는 친구가 만든건지 알 수가 없었다. 

멘붕이 몇 번 오다보니 올해 나의 목표는 **개발 프로세스**를 바로 잡는 것이 되었다.

<br><br>

Q. 근데 이걸 누구한테 물어보나요 ?? ㅠㅠ

A. 그건 바로 [[안드로이드 컨퍼런스]우리 회사는 이렇게 개발해요](https://event-us.kr/ted/event/8421) !

<br><br>

![](/image/2019-08-18-1/company_list.png)

<br>

체계적인 코드관리에 대해 이런저런 고민과 궁금증이 많아질 때쯤 발견하게 된 컨퍼런스였다.

이 컨퍼런스에서는 강남언니, 카카오페이, 타다, 네이버, 헤이딜러, 하이퍼커넥트, 뱅크샐러드까지 들어본적 없는 사람이 없을 유명한 서비스를 개발하는 회사들이 모여 개발 프로세스나 여러가지 기술들, 다른 직군들과 소통하는 방법 등을 발표하였는데 정말 아무것도 모르는 나에게는 배울만한 기술과 협업툴들이 한 두가지가 아니었다.

<br><br>

그 중 몇 가지 협업툴 / 기술스택을 정리해보자면 아래와 같다.

<br>

# GitHub

![](/image/2019-08-18-1/github.png)

<br>

'GitHub'는 git을 호스팅해주는 웹 서비스이다. 사실 개발자라면 이 GitHub를 모를리 없다고 해도 무방할 정도로 협업에 필수적인 서비스이다. 해당 서비스는 PR(pull request) / Label / Comment 등 다양한 기능을 사용함으로써 소스코드를 체계적으로 관리할 수 있도록 한다.

이번 컨퍼런스에서 알게된 희소식은 마이크로 소프트가 Pull Panda를 인수하면서 무료로 사용할 수 있게 되었다고 한다. Pull Panda는 코드 리뷰 툴로, Slack과 연동하여 PR상태를 파악할 수 있도록 하고 코드 리뷰 작업 자동할당 및 리뷰 관련 데이터 통계를 제공한다. GitHub와 함께 사용이 가능하니, 도입을 생각해보는 것도 나쁘지 않을 것 같다.

<br><br>

# Slack

![](/image/2019-08-18-1/slack.jpg)

<br>

'Slack' 은 협업 메신저 도구로, 현재 나도 사용중인 툴이다. 위의 대다수 기업들이 해당툴을 사용하고 있었는데 굉장히 체계적이었다. 가이드를 만들거나 채널을 세분화하는 등 업무내용을 쉽게 파악 및 처리할 수 있도록 정리하여 업무효율을 높이는데 사용되었다.

<br><br>

# Zeplin

![](/image/2019-08-18-1/zeplin.png)

<br>

'Zeplin'은 디자이너와 개발자간의 효율적인 공동작업을 위한 협업툴이다. 이전에는 디자이너가 ppt에 디자인 리소스를 하나하나 정리하여 개발자에게 전달했었다는데 제플린이 이 번거로운 점을 해결해주었다. 이 툴 또한 내가 프로젝트를 진행하면서 자주 사용하곤 했으나 주요 색상이나 컴포넌트들을 관리하거나 코멘트를 남겨 피드백을 해본 적은 없었다는 점이 조금 아쉬웠다.

<br><br>

# Jira

![](/image/2019-08-18-1/jira.png)

<br>

'Jira'는 소프트웨어 프로세스 관리 도구(이슈트래커)이다. 프로젝트 진행 중, 새로운 이슈가 생겼을 때 이를 누가 어떤방식으로 해결할 것이며 현재 작업현황은 어떠한지 설정해놓음으로써 효율적인 이슈관리가 가능하다. 또한 이렇게 쌓여진 이슈들은 히스토리로 남아 추후 발생할 이슈에 대한 대응책으로도 사용될 수 있을 것이다.

특히 Agile 개발 프로세스를 추구한다면 'Jira'의 도입이 아주 큰 도움이 될 것이다.

<br><br>

# Jenkins

![](/image/2019-08-18-1/jenkins.png)

<br>

'Jenkins'는 CI(continuous integration) 서비스를 제공하는 툴이다. 그렇다면 CI란 무엇일까? 여러명의 개발자들이 하나의 프로그램을 개발할 때, 각각의 소스코드들을 주기적으로 Merge함으로써 오류를 사전에 처리하여 개발비용을 줄이는 기법이다. 자동으로 Build와 Test를 진행해주니 개발협업을 진행할 때 사용하지 않을 이유가 없을 것 같다.

<br><br>

# Koin

![](/image/2019-08-18-1/koin.jpeg)

<br>

'Koin'은 DI(dependency injection) 관리 라이브러리이다. 이 때 DI란 또 무엇일까? A객체가 property로 B객체를 가짐으로써 서로 상호작용하고 있다면 A객체는 B객체에 의존성을 가지게 된다. 그러나 이러한 의존성은 모듈변화에 예민하고 단위테스트가 어렵다는 단점이 있다. 이러한 점을 보완하기 위한 것이 바로 'Koin'인데, 의존관계를 외부 설정 파일로 정의함으로써 객체 생성과 사용을 분리하고 재사용을 용이하도록 한다. 아직 초초급 개발자인 나로써는 이해하기 어려운 부분이 많지만 실무에 도입할 수 있다면 더 안정적인 앱을 개발할 수 있을 것 같다.

비슷한 라이브러리로 Dagger가 있는데 이 두 라이브러리의 차이점은 Harry The Great님의 "[[Android] Koin vs Dagger 그리고 추가된기능](https://medium.com/harrythegreat/android-koin-%EB%A0%88%EB%B2%A8%EC%97%85-deep-drive-56b63b2e35d2)"을 읽어본다면 이해가 빠를것이다.

<br><br>

# Git Flow

![](/image/2019-08-18-1/gitflow.png)

<br>

'Git Flow'는 Git 저장소를 보다 체계적으로 관리하기 위한 브랜칭기법이다. Git Flow는 현재 도입하여 사용중인 기업이 많을 것이다.

주요 브랜치로는 master branch / develop branch가 있으며 기능구현을 위해 feature branch를, feature branch가 develop branch로 모두 merge 되었을 때 QA를 위해 release branch를, 출시 버전에서 버그가 발생할 경우에는 hotfix branch를 추가로 생성하여 관리하는 것이 보통 일반적이다.

실제로 프로젝트 성격에 맞게 커스텀하여 사용해본 결과 체계적인 부분에서는 이전과 확실히 차이가 있었다. 개발 현황을 한눈에 볼 수 있었고 효율적으로 코드를 관리할 수 있었던 부분이 협업하는 데에 이점이 되었다. 사용중인 branch 관리 기법을 가지고 있지 않다면 한 번쯤 사용해보는 것도 나쁘지 않을 것 같다.

<br><br>

# Clean Architecture

![](/image/2019-08-18-1/clean-architecture.jpg)

<br>

'Clean Architecture'는 각각 레이어 영역을 나눠 관리하는 소프트웨어 아키텍처 중 하나이다. 사실 이 Clean Architecture는 서버부분에서 많이 사용하는 아키텍처이지만 안드로이드에서도 커스텀되어 사용되는 것으로 알고 있다. 실제 컨퍼런스에서 발표된 다수의 기업들이 Clean Architecture로 대부분 MVVM, MVP를 사용하고 있었다.

사실 코드를 관리할 때 가장 고민이었던 부분이 이 아키텍처 부분이었는데 다른 기업들이 어떤 아키텍처를 도입하였고 각각의 장단점이 무엇인지 들을 수 있어, 나에게 개인적으로 가장 도움이 많이 되었던 부분이었던 것 같다.

<br><br>

# 후기

![](/image/2019-08-18-1/IMG_9718.JPG)

<br>

이외에도 Rective X, Blue print, 여러 디자인 패턴 등등 처음들어보는 것도 있었고 익숙하지는 않지만 몇 번 들어봤던 것들도 있었다. 사실 백지장인 나에게 거의 모든 부분이 새로웠기 때문에 ㅠㅠㅠ 위에 나열한 협업툴/기술스택이 그다지 어려운 내용도 아니고 많은 개발자들에게 익숙한 부분이 많을 수도 있을 것이다. 그래도 혹시 나같은 초초급 개발자에게라도 도움이 됐으면 좋겠다,,,,,

이번 컨퍼런스를 통해 확실히 얻을 수 있었던 것은 어느정도 방향을 잡는데 큰 도움이 되었다는 것이다. 기술스택뿐만 아니라 다른 직군과의 커뮤니케이션이나 효율을 위한 회의방식, 회고방법 등등 **효율적이고 체계적인 개발 프로세스**란 이런 것이구나를 많이 배울 수 있었다. 한 가지 더 느낀 점이 있다면 안드로이드 시장에서 Kotlin이 차지하는 비중이 높아지고 있다는 것이었다. 이번 컨퍼런스에서 대부분의 발표자분들이 Kotlin의 중요성을 강조하셨고 앞으로도 Kotlin 코드의 비중을 높일 것이라 하셨다. 아직 Java 코드가 적지는 않지만, 많은 안드로이드 개발자가 Kotlin을 선호함에 따라 앞으로도 Kotlin이 더욱 막강한 파워를 가질 수 있을 것으로 보였다.

컨퍼런스에서 들었던 모든 내용을 실무에 도입할 수는 없겠지만 현재 내가 진행하고 있는 프로젝트나 개발여건 내에서 유용하게 사용할 수 있다고 생각되는 협업툴이나 기술스택에 대해 어느정도 논의해볼 수 있다면 좋을 것 같다. 앞으로 내가 개발체계를 잡아가기 위한 유익한 컨퍼런스였다.

<br><br><br><br><br>